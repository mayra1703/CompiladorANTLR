// Generated from c:/Users/mayme/OneDrive/Desktop/automatas2/practica02/proyectoAutomatas/grammar/C.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class CLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		TYPE=1, BOOL=2, STRING=3, PLUS=4, MINUS=5, MULT=6, DIV=7, IGUAL=8, OC=9, 
		OL=10, VOID=11, MAIN=12, INITPAR=13, FINALPAR=14, IF=15, ELSE=16, PRINTF=17, 
		INITKEY=18, FINALKEY=19, SEMI=20, INT=21, ID=22, INV_ID=23, NEWLINE=24, 
		SPACES=25;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"TYPE", "BOOL", "STRING", "PLUS", "MINUS", "MULT", "DIV", "IGUAL", "OC", 
			"OL", "VOID", "MAIN", "INITPAR", "FINALPAR", "IF", "ELSE", "PRINTF", 
			"INITKEY", "FINALKEY", "SEMI", "INT", "ID", "INV_ID", "NEWLINE", "SPACES"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'='", null, null, 
			"'void'", "'main'", "'('", "')'", "'if'", "'else'", "'printf'", "'{'", 
			"'}'", "';'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "TYPE", "BOOL", "STRING", "PLUS", "MINUS", "MULT", "DIV", "IGUAL", 
			"OC", "OL", "VOID", "MAIN", "INITPAR", "FINALPAR", "IF", "ELSE", "PRINTF", 
			"INITKEY", "FINALKEY", "SEMI", "INT", "ID", "INV_ID", "NEWLINE", "SPACES"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public CLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "C.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u0019\u00b1\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017"+
		"\u0002\u0018\u0007\u0018\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0003\u0000@\b\u0000\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0003\u0001K\b\u0001\u0001\u0002\u0001\u0002\u0005\u0002"+
		"O\b\u0002\n\u0002\f\u0002R\t\u0002\u0001\u0002\u0001\u0002\u0001\u0003"+
		"\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0003\bg\b\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0003\to\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f"+
		"\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001"+
		"\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0004"+
		"\u0014\u0095\b\u0014\u000b\u0014\f\u0014\u0096\u0001\u0015\u0001\u0015"+
		"\u0004\u0015\u009b\b\u0015\u000b\u0015\f\u0015\u009c\u0003\u0015\u009f"+
		"\b\u0015\u0001\u0016\u0004\u0016\u00a2\b\u0016\u000b\u0016\f\u0016\u00a3"+
		"\u0001\u0017\u0003\u0017\u00a7\b\u0017\u0001\u0017\u0001\u0017\u0001\u0018"+
		"\u0004\u0018\u00ac\b\u0018\u000b\u0018\f\u0018\u00ad\u0001\u0018\u0001"+
		"\u0018\u0001P\u0000\u0019\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004"+
		"\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017"+
		"\f\u0019\r\u001b\u000e\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013\'"+
		"\u0014)\u0015+\u0016-\u0017/\u00181\u0019\u0001\u0000\u0006\u0002\u0000"+
		"<<>>\u0001\u000009\u0002\u0000AZaz\u0004\u000009AZ__az\u0005\u0000++-"+
		"-09AZaz\u0003\u0000\t\n\r\r  \u00bf\u0000\u0001\u0001\u0000\u0000\u0000"+
		"\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000"+
		"\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000"+
		"\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f"+
		"\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013"+
		"\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017"+
		"\u0001\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b"+
		"\u0001\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000\u001f"+
		"\u0001\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000"+
		"\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000"+
		"\u0000\u0000)\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000"+
		"-\u0001\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u00001\u0001"+
		"\u0000\u0000\u0000\u0001?\u0001\u0000\u0000\u0000\u0003J\u0001\u0000\u0000"+
		"\u0000\u0005L\u0001\u0000\u0000\u0000\u0007U\u0001\u0000\u0000\u0000\t"+
		"W\u0001\u0000\u0000\u0000\u000bY\u0001\u0000\u0000\u0000\r[\u0001\u0000"+
		"\u0000\u0000\u000f]\u0001\u0000\u0000\u0000\u0011f\u0001\u0000\u0000\u0000"+
		"\u0013n\u0001\u0000\u0000\u0000\u0015p\u0001\u0000\u0000\u0000\u0017u"+
		"\u0001\u0000\u0000\u0000\u0019z\u0001\u0000\u0000\u0000\u001b|\u0001\u0000"+
		"\u0000\u0000\u001d~\u0001\u0000\u0000\u0000\u001f\u0081\u0001\u0000\u0000"+
		"\u0000!\u0086\u0001\u0000\u0000\u0000#\u008d\u0001\u0000\u0000\u0000%"+
		"\u008f\u0001\u0000\u0000\u0000\'\u0091\u0001\u0000\u0000\u0000)\u0094"+
		"\u0001\u0000\u0000\u0000+\u0098\u0001\u0000\u0000\u0000-\u00a1\u0001\u0000"+
		"\u0000\u0000/\u00a6\u0001\u0000\u0000\u00001\u00ab\u0001\u0000\u0000\u0000"+
		"34\u0005i\u0000\u000045\u0005n\u0000\u00005@\u0005t\u0000\u000067\u0005"+
		"c\u0000\u000078\u0005h\u0000\u000089\u0005a\u0000\u00009@\u0005r\u0000"+
		"\u0000:;\u0005f\u0000\u0000;<\u0005l\u0000\u0000<=\u0005o\u0000\u0000"+
		"=>\u0005a\u0000\u0000>@\u0005t\u0000\u0000?3\u0001\u0000\u0000\u0000?"+
		"6\u0001\u0000\u0000\u0000?:\u0001\u0000\u0000\u0000@\u0002\u0001\u0000"+
		"\u0000\u0000AB\u0005t\u0000\u0000BC\u0005r\u0000\u0000CD\u0005u\u0000"+
		"\u0000DK\u0005e\u0000\u0000EF\u0005f\u0000\u0000FG\u0005a\u0000\u0000"+
		"GH\u0005l\u0000\u0000HI\u0005s\u0000\u0000IK\u0005e\u0000\u0000JA\u0001"+
		"\u0000\u0000\u0000JE\u0001\u0000\u0000\u0000K\u0004\u0001\u0000\u0000"+
		"\u0000LP\u0005\"\u0000\u0000MO\t\u0000\u0000\u0000NM\u0001\u0000\u0000"+
		"\u0000OR\u0001\u0000\u0000\u0000PQ\u0001\u0000\u0000\u0000PN\u0001\u0000"+
		"\u0000\u0000QS\u0001\u0000\u0000\u0000RP\u0001\u0000\u0000\u0000ST\u0005"+
		"\"\u0000\u0000T\u0006\u0001\u0000\u0000\u0000UV\u0005+\u0000\u0000V\b"+
		"\u0001\u0000\u0000\u0000WX\u0005-\u0000\u0000X\n\u0001\u0000\u0000\u0000"+
		"YZ\u0005*\u0000\u0000Z\f\u0001\u0000\u0000\u0000[\\\u0005/\u0000\u0000"+
		"\\\u000e\u0001\u0000\u0000\u0000]^\u0005=\u0000\u0000^\u0010\u0001\u0000"+
		"\u0000\u0000_g\u0007\u0000\u0000\u0000`a\u0005<\u0000\u0000ag\u0005=\u0000"+
		"\u0000bc\u0005>\u0000\u0000cg\u0005=\u0000\u0000de\u0005!\u0000\u0000"+
		"eg\u0005=\u0000\u0000f_\u0001\u0000\u0000\u0000f`\u0001\u0000\u0000\u0000"+
		"fb\u0001\u0000\u0000\u0000fd\u0001\u0000\u0000\u0000g\u0012\u0001\u0000"+
		"\u0000\u0000hi\u0005|\u0000\u0000io\u0005|\u0000\u0000jk\u0005&\u0000"+
		"\u0000ko\u0005&\u0000\u0000lm\u0005=\u0000\u0000mo\u0005=\u0000\u0000"+
		"nh\u0001\u0000\u0000\u0000nj\u0001\u0000\u0000\u0000nl\u0001\u0000\u0000"+
		"\u0000o\u0014\u0001\u0000\u0000\u0000pq\u0005v\u0000\u0000qr\u0005o\u0000"+
		"\u0000rs\u0005i\u0000\u0000st\u0005d\u0000\u0000t\u0016\u0001\u0000\u0000"+
		"\u0000uv\u0005m\u0000\u0000vw\u0005a\u0000\u0000wx\u0005i\u0000\u0000"+
		"xy\u0005n\u0000\u0000y\u0018\u0001\u0000\u0000\u0000z{\u0005(\u0000\u0000"+
		"{\u001a\u0001\u0000\u0000\u0000|}\u0005)\u0000\u0000}\u001c\u0001\u0000"+
		"\u0000\u0000~\u007f\u0005i\u0000\u0000\u007f\u0080\u0005f\u0000\u0000"+
		"\u0080\u001e\u0001\u0000\u0000\u0000\u0081\u0082\u0005e\u0000\u0000\u0082"+
		"\u0083\u0005l\u0000\u0000\u0083\u0084\u0005s\u0000\u0000\u0084\u0085\u0005"+
		"e\u0000\u0000\u0085 \u0001\u0000\u0000\u0000\u0086\u0087\u0005p\u0000"+
		"\u0000\u0087\u0088\u0005r\u0000\u0000\u0088\u0089\u0005i\u0000\u0000\u0089"+
		"\u008a\u0005n\u0000\u0000\u008a\u008b\u0005t\u0000\u0000\u008b\u008c\u0005"+
		"f\u0000\u0000\u008c\"\u0001\u0000\u0000\u0000\u008d\u008e\u0005{\u0000"+
		"\u0000\u008e$\u0001\u0000\u0000\u0000\u008f\u0090\u0005}\u0000\u0000\u0090"+
		"&\u0001\u0000\u0000\u0000\u0091\u0092\u0005;\u0000\u0000\u0092(\u0001"+
		"\u0000\u0000\u0000\u0093\u0095\u0007\u0001\u0000\u0000\u0094\u0093\u0001"+
		"\u0000\u0000\u0000\u0095\u0096\u0001\u0000\u0000\u0000\u0096\u0094\u0001"+
		"\u0000\u0000\u0000\u0096\u0097\u0001\u0000\u0000\u0000\u0097*\u0001\u0000"+
		"\u0000\u0000\u0098\u009e\u0007\u0002\u0000\u0000\u0099\u009b\u0007\u0003"+
		"\u0000\u0000\u009a\u0099\u0001\u0000\u0000\u0000\u009b\u009c\u0001\u0000"+
		"\u0000\u0000\u009c\u009a\u0001\u0000\u0000\u0000\u009c\u009d\u0001\u0000"+
		"\u0000\u0000\u009d\u009f\u0001\u0000\u0000\u0000\u009e\u009a\u0001\u0000"+
		"\u0000\u0000\u009e\u009f\u0001\u0000\u0000\u0000\u009f,\u0001\u0000\u0000"+
		"\u0000\u00a0\u00a2\u0007\u0004\u0000\u0000\u00a1\u00a0\u0001\u0000\u0000"+
		"\u0000\u00a2\u00a3\u0001\u0000\u0000\u0000\u00a3\u00a1\u0001\u0000\u0000"+
		"\u0000\u00a3\u00a4\u0001\u0000\u0000\u0000\u00a4.\u0001\u0000\u0000\u0000"+
		"\u00a5\u00a7\u0005\r\u0000\u0000\u00a6\u00a5\u0001\u0000\u0000\u0000\u00a6"+
		"\u00a7\u0001\u0000\u0000\u0000\u00a7\u00a8\u0001\u0000\u0000\u0000\u00a8"+
		"\u00a9\u0005\n\u0000\u0000\u00a90\u0001\u0000\u0000\u0000\u00aa\u00ac"+
		"\u0007\u0005\u0000\u0000\u00ab\u00aa\u0001\u0000\u0000\u0000\u00ac\u00ad"+
		"\u0001\u0000\u0000\u0000\u00ad\u00ab\u0001\u0000\u0000\u0000\u00ad\u00ae"+
		"\u0001\u0000\u0000\u0000\u00ae\u00af\u0001\u0000\u0000\u0000\u00af\u00b0"+
		"\u0006\u0018\u0000\u0000\u00b02\u0001\u0000\u0000\u0000\f\u0000?JPfn\u0096"+
		"\u009c\u009e\u00a3\u00a6\u00ad\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}