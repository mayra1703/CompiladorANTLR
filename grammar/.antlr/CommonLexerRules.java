// Generated from c:/Users/mayme/OneDrive/Desktop/automatas2/practica02/proyectoAutomatas/grammar/CommonLexerRules.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class CommonLexerRules extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		TYPE=1, STRING=2, PLUS=3, MINUS=4, TIMES=5, DIV=6, OC=7, OL=8, BOOL=9, 
		SWEET=10, SWEETCONDITION=11, ELSE=12, ARROW=13, SHOW=14, INITKEY=15, FINALKEY=16, 
		GATITO=17, PUNTITO=18, NUM=19, ID=20, WRONGID=21, NEWLINE=22, SPACES=23;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"TYPE", "STRING", "PLUS", "MINUS", "TIMES", "DIV", "OC", "OL", "BOOL", 
			"SWEET", "SWEETCONDITION", "ELSE", "ARROW", "SHOW", "INITKEY", "FINALKEY", 
			"GATITO", "PUNTITO", "NUM", "ID", "WRONGID", "NEWLINE", "SPACES"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, "'+'", "'-'", "'*'", "'/'", null, null, null, "'Sweet'", 
			"'SweetCondition'", "'Else'", "'->'", "'SHOW'", "'{'", "'}'", "'#'", 
			"'.'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "TYPE", "STRING", "PLUS", "MINUS", "TIMES", "DIV", "OC", "OL", 
			"BOOL", "SWEET", "SWEETCONDITION", "ELSE", "ARROW", "SHOW", "INITKEY", 
			"FINALKEY", "GATITO", "PUNTITO", "NUM", "ID", "WRONGID", "NEWLINE", "SPACES"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public CommonLexerRules(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CommonLexerRules.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u0017\u00b7\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0003\u0000D\b\u0000\u0001\u0001\u0001\u0001\u0005\u0001H\b\u0001\n\u0001"+
		"\f\u0001K\t\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001"+
		"\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0003\u0006^\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007f\b\u0007\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\bq\b\b\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010"+
		"\u0001\u0011\u0001\u0011\u0001\u0012\u0004\u0012\u009e\b\u0012\u000b\u0012"+
		"\f\u0012\u009f\u0001\u0013\u0004\u0013\u00a3\b\u0013\u000b\u0013\f\u0013"+
		"\u00a4\u0001\u0014\u0004\u0014\u00a8\b\u0014\u000b\u0014\f\u0014\u00a9"+
		"\u0001\u0015\u0003\u0015\u00ad\b\u0015\u0001\u0015\u0001\u0015\u0001\u0016"+
		"\u0004\u0016\u00b2\b\u0016\u000b\u0016\f\u0016\u00b3\u0001\u0016\u0001"+
		"\u0016\u0001I\u0000\u0017\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004"+
		"\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017"+
		"\f\u0019\r\u001b\u000e\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013\'"+
		"\u0014)\u0015+\u0016-\u0017\u0001\u0000\u0005\u0002\u0000<<>>\u0001\u0000"+
		"09\u0002\u0000AZaz\u0006\u0000*+--/9AZ__az\u0003\u0000\t\n\r\r  \u00c4"+
		"\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000"+
		"\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000"+
		"\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000"+
		"\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0001C"+
		"\u0001\u0000\u0000\u0000\u0003E\u0001\u0000\u0000\u0000\u0005N\u0001\u0000"+
		"\u0000\u0000\u0007P\u0001\u0000\u0000\u0000\tR\u0001\u0000\u0000\u0000"+
		"\u000bT\u0001\u0000\u0000\u0000\r]\u0001\u0000\u0000\u0000\u000fe\u0001"+
		"\u0000\u0000\u0000\u0011p\u0001\u0000\u0000\u0000\u0013r\u0001\u0000\u0000"+
		"\u0000\u0015x\u0001\u0000\u0000\u0000\u0017\u0087\u0001\u0000\u0000\u0000"+
		"\u0019\u008c\u0001\u0000\u0000\u0000\u001b\u008f\u0001\u0000\u0000\u0000"+
		"\u001d\u0094\u0001\u0000\u0000\u0000\u001f\u0096\u0001\u0000\u0000\u0000"+
		"!\u0098\u0001\u0000\u0000\u0000#\u009a\u0001\u0000\u0000\u0000%\u009d"+
		"\u0001\u0000\u0000\u0000\'\u00a2\u0001\u0000\u0000\u0000)\u00a7\u0001"+
		"\u0000\u0000\u0000+\u00ac\u0001\u0000\u0000\u0000-\u00b1\u0001\u0000\u0000"+
		"\u0000/0\u0005m\u0000\u000001\u0005i\u0000\u000012\u0005n\u0000\u0000"+
		"2D\u0005t\u0000\u000034\u0005m\u0000\u000045\u0005i\u0000\u000056\u0005"+
		"n\u0000\u000067\u0005t\u0000\u000078\u0005c\u0000\u000089\u0005h\u0000"+
		"\u00009:\u0005a\u0000\u0000:D\u0005r\u0000\u0000;<\u0005m\u0000\u0000"+
		"<=\u0005i\u0000\u0000=>\u0005n\u0000\u0000>?\u0005t\u0000\u0000?@\u0005"+
		"f\u0000\u0000@A\u0005l\u0000\u0000AB\u0005o\u0000\u0000BD\u0005t\u0000"+
		"\u0000C/\u0001\u0000\u0000\u0000C3\u0001\u0000\u0000\u0000C;\u0001\u0000"+
		"\u0000\u0000D\u0002\u0001\u0000\u0000\u0000EI\u0005\"\u0000\u0000FH\t"+
		"\u0000\u0000\u0000GF\u0001\u0000\u0000\u0000HK\u0001\u0000\u0000\u0000"+
		"IJ\u0001\u0000\u0000\u0000IG\u0001\u0000\u0000\u0000JL\u0001\u0000\u0000"+
		"\u0000KI\u0001\u0000\u0000\u0000LM\u0005\"\u0000\u0000M\u0004\u0001\u0000"+
		"\u0000\u0000NO\u0005+\u0000\u0000O\u0006\u0001\u0000\u0000\u0000PQ\u0005"+
		"-\u0000\u0000Q\b\u0001\u0000\u0000\u0000RS\u0005*\u0000\u0000S\n\u0001"+
		"\u0000\u0000\u0000TU\u0005/\u0000\u0000U\f\u0001\u0000\u0000\u0000V^\u0007"+
		"\u0000\u0000\u0000WX\u0005<\u0000\u0000X^\u0005=\u0000\u0000YZ\u0005>"+
		"\u0000\u0000Z^\u0005=\u0000\u0000[\\\u0005!\u0000\u0000\\^\u0005=\u0000"+
		"\u0000]V\u0001\u0000\u0000\u0000]W\u0001\u0000\u0000\u0000]Y\u0001\u0000"+
		"\u0000\u0000][\u0001\u0000\u0000\u0000^\u000e\u0001\u0000\u0000\u0000"+
		"_`\u0005|\u0000\u0000`f\u0005|\u0000\u0000ab\u0005&\u0000\u0000bf\u0005"+
		"&\u0000\u0000cd\u0005=\u0000\u0000df\u0005=\u0000\u0000e_\u0001\u0000"+
		"\u0000\u0000ea\u0001\u0000\u0000\u0000ec\u0001\u0000\u0000\u0000f\u0010"+
		"\u0001\u0000\u0000\u0000gh\u0005t\u0000\u0000hi\u0005r\u0000\u0000ij\u0005"+
		"u\u0000\u0000jq\u0005e\u0000\u0000kl\u0005f\u0000\u0000lm\u0005a\u0000"+
		"\u0000mn\u0005l\u0000\u0000no\u0005s\u0000\u0000oq\u0005e\u0000\u0000"+
		"pg\u0001\u0000\u0000\u0000pk\u0001\u0000\u0000\u0000q\u0012\u0001\u0000"+
		"\u0000\u0000rs\u0005S\u0000\u0000st\u0005w\u0000\u0000tu\u0005e\u0000"+
		"\u0000uv\u0005e\u0000\u0000vw\u0005t\u0000\u0000w\u0014\u0001\u0000\u0000"+
		"\u0000xy\u0005S\u0000\u0000yz\u0005w\u0000\u0000z{\u0005e\u0000\u0000"+
		"{|\u0005e\u0000\u0000|}\u0005t\u0000\u0000}~\u0005C\u0000\u0000~\u007f"+
		"\u0005o\u0000\u0000\u007f\u0080\u0005n\u0000\u0000\u0080\u0081\u0005d"+
		"\u0000\u0000\u0081\u0082\u0005i\u0000\u0000\u0082\u0083\u0005t\u0000\u0000"+
		"\u0083\u0084\u0005i\u0000\u0000\u0084\u0085\u0005o\u0000\u0000\u0085\u0086"+
		"\u0005n\u0000\u0000\u0086\u0016\u0001\u0000\u0000\u0000\u0087\u0088\u0005"+
		"E\u0000\u0000\u0088\u0089\u0005l\u0000\u0000\u0089\u008a\u0005s\u0000"+
		"\u0000\u008a\u008b\u0005e\u0000\u0000\u008b\u0018\u0001\u0000\u0000\u0000"+
		"\u008c\u008d\u0005-\u0000\u0000\u008d\u008e\u0005>\u0000\u0000\u008e\u001a"+
		"\u0001\u0000\u0000\u0000\u008f\u0090\u0005S\u0000\u0000\u0090\u0091\u0005"+
		"H\u0000\u0000\u0091\u0092\u0005O\u0000\u0000\u0092\u0093\u0005W\u0000"+
		"\u0000\u0093\u001c\u0001\u0000\u0000\u0000\u0094\u0095\u0005{\u0000\u0000"+
		"\u0095\u001e\u0001\u0000\u0000\u0000\u0096\u0097\u0005}\u0000\u0000\u0097"+
		" \u0001\u0000\u0000\u0000\u0098\u0099\u0005#\u0000\u0000\u0099\"\u0001"+
		"\u0000\u0000\u0000\u009a\u009b\u0005.\u0000\u0000\u009b$\u0001\u0000\u0000"+
		"\u0000\u009c\u009e\u0007\u0001\u0000\u0000\u009d\u009c\u0001\u0000\u0000"+
		"\u0000\u009e\u009f\u0001\u0000\u0000\u0000\u009f\u009d\u0001\u0000\u0000"+
		"\u0000\u009f\u00a0\u0001\u0000\u0000\u0000\u00a0&\u0001\u0000\u0000\u0000"+
		"\u00a1\u00a3\u0007\u0002\u0000\u0000\u00a2\u00a1\u0001\u0000\u0000\u0000"+
		"\u00a3\u00a4\u0001\u0000\u0000\u0000\u00a4\u00a2\u0001\u0000\u0000\u0000"+
		"\u00a4\u00a5\u0001\u0000\u0000\u0000\u00a5(\u0001\u0000\u0000\u0000\u00a6"+
		"\u00a8\u0007\u0003\u0000\u0000\u00a7\u00a6\u0001\u0000\u0000\u0000\u00a8"+
		"\u00a9\u0001\u0000\u0000\u0000\u00a9\u00a7\u0001\u0000\u0000\u0000\u00a9"+
		"\u00aa\u0001\u0000\u0000\u0000\u00aa*\u0001\u0000\u0000\u0000\u00ab\u00ad"+
		"\u0005\r\u0000\u0000\u00ac\u00ab\u0001\u0000\u0000\u0000\u00ac\u00ad\u0001"+
		"\u0000\u0000\u0000\u00ad\u00ae\u0001\u0000\u0000\u0000\u00ae\u00af\u0005"+
		"\n\u0000\u0000\u00af,\u0001\u0000\u0000\u0000\u00b0\u00b2\u0007\u0004"+
		"\u0000\u0000\u00b1\u00b0\u0001\u0000\u0000\u0000\u00b2\u00b3\u0001\u0000"+
		"\u0000\u0000\u00b3\u00b1\u0001\u0000\u0000\u0000\u00b3\u00b4\u0001\u0000"+
		"\u0000\u0000\u00b4\u00b5\u0001\u0000\u0000\u0000\u00b5\u00b6\u0006\u0016"+
		"\u0000\u0000\u00b6.\u0001\u0000\u0000\u0000\u000b\u0000CI]ep\u009f\u00a4"+
		"\u00a9\u00ac\u00b3\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}