// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,35,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,101,8,2,1,3,1,3,1,4,
1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,122,
8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,145,8,10,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,1,11,3,11,157,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,5,25,251,
8,25,10,25,12,25,254,9,25,1,25,1,25,1,26,4,26,259,8,26,11,26,12,26,260,1,
27,1,27,3,27,265,8,27,1,27,1,27,1,28,4,28,270,8,28,11,28,12,28,271,1,28,
1,28,4,28,276,8,28,11,28,12,28,277,1,29,4,29,281,8,29,11,29,12,29,282,1,
30,1,30,1,30,1,30,5,30,289,8,30,10,30,12,30,292,9,30,1,30,3,30,295,8,30,
1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,305,8,31,10,31,12,31,308,9,
31,1,31,1,31,1,31,1,31,1,31,1,32,3,32,316,8,32,1,32,1,32,1,33,4,33,321,8,
33,11,33,12,33,322,1,33,1,33,1,34,1,34,3,252,290,306,0,35,1,1,3,2,5,3,7,
4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
59,30,61,31,63,32,65,33,67,34,69,35,1,0,6,2,0,60,60,62,62,1,0,48,57,3,0,
32,32,65,90,97,122,1,0,46,46,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,
351,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,0,5,100,1,0,0,0,7,102,1,0,0,0,9,
104,1,0,0,0,11,106,1,0,0,0,13,108,1,0,0,0,15,110,1,0,0,0,17,112,1,0,0,0,
19,121,1,0,0,0,21,144,1,0,0,0,23,156,1,0,0,0,25,158,1,0,0,0,27,172,1,0,0,
0,29,186,1,0,0,0,31,201,1,0,0,0,33,206,1,0,0,0,35,216,1,0,0,0,37,226,1,0,
0,0,39,229,1,0,0,0,41,232,1,0,0,0,43,240,1,0,0,0,45,242,1,0,0,0,47,244,1,
0,0,0,49,246,1,0,0,0,51,248,1,0,0,0,53,258,1,0,0,0,55,262,1,0,0,0,57,269,
1,0,0,0,59,280,1,0,0,0,61,284,1,0,0,0,63,300,1,0,0,0,65,315,1,0,0,0,67,320,
1,0,0,0,69,326,1,0,0,0,71,72,5,40,0,0,72,2,1,0,0,0,73,74,5,41,0,0,74,4,1,
0,0,0,75,76,5,114,0,0,76,77,5,101,0,0,77,78,5,108,0,0,78,79,5,97,0,0,79,
80,5,120,0,0,80,81,5,105,0,0,81,82,5,110,0,0,82,101,5,116,0,0,83,84,5,110,
0,0,84,85,5,105,0,0,85,86,5,103,0,0,86,87,5,104,0,0,87,88,5,116,0,0,88,89,
5,99,0,0,89,90,5,104,0,0,90,91,5,97,0,0,91,101,5,114,0,0,92,93,5,115,0,0,
93,94,5,107,0,0,94,95,5,121,0,0,95,96,5,102,0,0,96,97,5,108,0,0,97,98,5,
111,0,0,98,99,5,97,0,0,99,101,5,116,0,0,100,75,1,0,0,0,100,83,1,0,0,0,100,
92,1,0,0,0,101,6,1,0,0,0,102,103,5,43,0,0,103,8,1,0,0,0,104,105,5,45,0,0,
105,10,1,0,0,0,106,107,5,42,0,0,107,12,1,0,0,0,108,109,5,47,0,0,109,14,1,
0,0,0,110,111,5,37,0,0,111,16,1,0,0,0,112,113,5,61,0,0,113,18,1,0,0,0,114,
122,7,0,0,0,115,116,5,60,0,0,116,122,5,61,0,0,117,118,5,62,0,0,118,122,5,
61,0,0,119,120,5,33,0,0,120,122,5,61,0,0,121,114,1,0,0,0,121,115,1,0,0,0,
121,117,1,0,0,0,121,119,1,0,0,0,122,20,1,0,0,0,123,124,5,124,0,0,124,145,
5,124,0,0,125,126,5,38,0,0,126,145,5,38,0,0,127,128,5,61,0,0,128,145,5,61,
0,0,129,130,5,112,0,0,130,131,5,101,0,0,131,132,5,97,0,0,132,133,5,99,0,
0,133,134,5,101,0,0,134,135,5,102,0,0,135,136,5,117,0,0,136,145,5,108,0,
0,137,138,5,99,0,0,138,139,5,104,0,0,139,140,5,97,0,0,140,141,5,111,0,0,
141,142,5,116,0,0,142,143,5,105,0,0,143,145,5,99,0,0,144,123,1,0,0,0,144,
125,1,0,0,0,144,127,1,0,0,0,144,129,1,0,0,0,144,137,1,0,0,0,145,22,1,0,0,
0,146,147,5,43,0,0,147,157,5,61,0,0,148,149,5,45,0,0,149,157,5,61,0,0,150,
151,5,42,0,0,151,157,5,61,0,0,152,153,5,47,0,0,153,157,5,61,0,0,154,155,
5,37,0,0,155,157,5,61,0,0,156,146,1,0,0,0,156,148,1,0,0,0,156,150,1,0,0,
0,156,152,1,0,0,0,156,154,1,0,0,0,157,24,1,0,0,0,158,159,5,83,0,0,159,160,
5,101,0,0,160,161,5,114,0,0,161,162,5,101,0,0,162,163,5,110,0,0,163,164,
5,105,0,0,164,165,5,116,0,0,165,166,5,121,0,0,166,167,5,67,0,0,167,168,5,
108,0,0,168,169,5,97,0,0,169,170,5,115,0,0,170,171,5,115,0,0,171,26,1,0,
0,0,172,173,5,67,0,0,173,174,5,111,0,0,174,175,5,122,0,0,175,176,5,121,0,
0,176,177,5,67,0,0,177,178,5,111,0,0,178,179,5,110,0,0,179,180,5,100,0,0,
180,181,5,105,0,0,181,182,5,116,0,0,182,183,5,105,0,0,183,184,5,111,0,0,
184,185,5,110,0,0,185,28,1,0,0,0,186,187,5,84,0,0,187,188,5,119,0,0,188,
189,5,105,0,0,189,190,5,108,0,0,190,191,5,105,0,0,191,192,5,103,0,0,192,
193,5,104,0,0,193,194,5,116,0,0,194,195,5,79,0,0,195,196,5,112,0,0,196,197,
5,116,0,0,197,198,5,105,0,0,198,199,5,111,0,0,199,200,5,110,0,0,200,30,1,
0,0,0,201,202,5,101,0,0,202,203,5,108,0,0,203,204,5,115,0,0,204,205,5,101,
0,0,205,32,1,0,0,0,206,207,5,68,0,0,207,208,5,114,0,0,208,209,5,101,0,0,
209,210,5,97,0,0,210,211,5,109,0,0,211,212,5,69,0,0,212,213,5,108,0,0,213,
214,5,115,0,0,214,215,5,101,0,0,215,34,1,0,0,0,216,217,5,68,0,0,217,218,
5,114,0,0,218,219,5,101,0,0,219,220,5,97,0,0,220,221,5,109,0,0,221,222,5,
76,0,0,222,223,5,111,0,0,223,224,5,111,0,0,224,225,5,112,0,0,225,36,1,0,
0,0,226,227,5,100,0,0,227,228,5,111,0,0,228,38,1,0,0,0,229,230,5,45,0,0,
230,231,5,62,0,0,231,40,1,0,0,0,232,233,5,87,0,0,233,234,5,72,0,0,234,235,
5,73,0,0,235,236,5,83,0,0,236,237,5,80,0,0,237,238,5,69,0,0,238,239,5,82,
0,0,239,42,1,0,0,0,240,241,5,123,0,0,241,44,1,0,0,0,242,243,5,125,0,0,243,
46,1,0,0,0,244,245,5,35,0,0,245,48,1,0,0,0,246,247,5,46,0,0,247,50,1,0,0,
0,248,252,5,34,0,0,249,251,9,0,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,253,
1,0,0,0,252,250,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,5,34,0,0,
256,52,1,0,0,0,257,259,7,1,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,
0,0,0,260,261,1,0,0,0,261,54,1,0,0,0,262,264,5,34,0,0,263,265,7,2,0,0,264,
263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,34,0,0,267,56,1,0,
0,0,268,270,7,1,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,
272,1,0,0,0,272,273,1,0,0,0,273,275,7,3,0,0,274,276,7,1,0,0,275,274,1,0,
0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,58,1,0,0,0,279,281,
7,4,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,
283,60,1,0,0,0,284,285,5,47,0,0,285,286,5,47,0,0,286,290,1,0,0,0,287,289,
9,0,0,0,288,287,1,0,0,0,289,292,1,0,0,0,290,291,1,0,0,0,290,288,1,0,0,0,
291,294,1,0,0,0,292,290,1,0,0,0,293,295,5,13,0,0,294,293,1,0,0,0,294,295,
1,0,0,0,295,296,1,0,0,0,296,297,5,10,0,0,297,298,1,0,0,0,298,299,6,30,0,
0,299,62,1,0,0,0,300,301,5,47,0,0,301,302,5,42,0,0,302,306,1,0,0,0,303,305,
9,0,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,307,1,0,0,0,306,304,1,0,0,0,
307,309,1,0,0,0,308,306,1,0,0,0,309,310,5,42,0,0,310,311,5,47,0,0,311,312,
1,0,0,0,312,313,6,31,0,0,313,64,1,0,0,0,314,316,5,13,0,0,315,314,1,0,0,0,
315,316,1,0,0,0,316,317,1,0,0,0,317,318,5,10,0,0,318,66,1,0,0,0,319,321,
7,5,0,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,
323,324,1,0,0,0,324,325,6,33,0,0,325,68,1,0,0,0,326,327,5,44,0,0,327,70,
1,0,0,0,16,0,100,121,144,156,252,260,264,271,277,282,290,294,306,315,322,
1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", null, "'+'", "'-'", "'*'", 
                         "'/'", "'%'", "'='", null, null, null, "'SerenityClass'", 
                         "'CozyCondition'", "'TwilightOption'", "'else'", 
                         "'DreamElse'", "'DreamLoop'", "'do'", "'->'", "'WHISPER'", 
                         "'{'", "'}'", "'#'", "'.'", null, null, null, null, 
                         null, null, null, null, null, "','" ];
	static symbolicNames = [ null, null, null, "TYPE", "PLUS", "MINUS", "MULT", 
                          "DIV", "MOD", "IGUAL", "OC", "OL", "MATH_EQUALS", 
                          "SERENITYCLASS", "COZYCONDITION", "TWILIGHTOPTION", 
                          "ELSE", "DREAMYELSE", "DREAMLOOP", "DO", "ARROW", 
                          "WHISPER", "INITKEY", "FINALKEY", "GATITO", "PUNTITO", 
                          "STARSTRING", "NUM", "CHAR", "FLOAT", "ID", "LINECOMMENT", 
                          "COMMENT", "NEWLINE", "SPACES", "COMA" ];
	static ruleNames = [ "T__0", "T__1", "TYPE", "PLUS", "MINUS", "MULT", "DIV", 
                      "MOD", "IGUAL", "OC", "OL", "MATH_EQUALS", "SERENITYCLASS", 
                      "COZYCONDITION", "TWILIGHTOPTION", "ELSE", "DREAMYELSE", 
                      "DREAMLOOP", "DO", "ARROW", "WHISPER", "INITKEY", 
                      "FINALKEY", "GATITO", "PUNTITO", "STARSTRING", "NUM", 
                      "CHAR", "FLOAT", "ID", "LINECOMMENT", "COMMENT", "NEWLINE", 
                      "SPACES", "COMA" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.TYPE = 3;
CompilatorLexer.PLUS = 4;
CompilatorLexer.MINUS = 5;
CompilatorLexer.MULT = 6;
CompilatorLexer.DIV = 7;
CompilatorLexer.MOD = 8;
CompilatorLexer.IGUAL = 9;
CompilatorLexer.OC = 10;
CompilatorLexer.OL = 11;
CompilatorLexer.MATH_EQUALS = 12;
CompilatorLexer.SERENITYCLASS = 13;
CompilatorLexer.COZYCONDITION = 14;
CompilatorLexer.TWILIGHTOPTION = 15;
CompilatorLexer.ELSE = 16;
CompilatorLexer.DREAMYELSE = 17;
CompilatorLexer.DREAMLOOP = 18;
CompilatorLexer.DO = 19;
CompilatorLexer.ARROW = 20;
CompilatorLexer.WHISPER = 21;
CompilatorLexer.INITKEY = 22;
CompilatorLexer.FINALKEY = 23;
CompilatorLexer.GATITO = 24;
CompilatorLexer.PUNTITO = 25;
CompilatorLexer.STARSTRING = 26;
CompilatorLexer.NUM = 27;
CompilatorLexer.CHAR = 28;
CompilatorLexer.FLOAT = 29;
CompilatorLexer.ID = 30;
CompilatorLexer.LINECOMMENT = 31;
CompilatorLexer.COMMENT = 32;
CompilatorLexer.NEWLINE = 33;
CompilatorLexer.SPACES = 34;
CompilatorLexer.COMA = 35;



