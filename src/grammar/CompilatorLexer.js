// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
3,2,91,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
8,1,8,3,8,110,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,133,8,9,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
21,5,21,214,8,21,10,21,12,21,217,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,
4,23,226,8,23,11,23,12,23,227,1,24,4,24,231,8,24,11,24,12,24,232,1,24,1,
24,4,24,237,8,24,11,24,12,24,238,1,25,4,25,242,8,25,11,25,12,25,243,1,26,
1,26,1,26,1,26,5,26,250,8,26,10,26,12,26,253,9,26,1,26,3,26,256,8,26,1,26,
1,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,266,8,27,10,27,12,27,269,9,27,1,
27,1,27,1,27,1,27,1,27,1,28,3,28,277,8,28,1,28,1,28,1,29,4,29,282,8,29,11,
29,12,29,283,1,29,1,29,3,215,251,267,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,6,2,0,
60,60,62,62,3,0,32,32,65,90,97,122,1,0,48,57,1,0,46,46,2,0,65,90,97,122,
3,0,9,10,13,13,32,32,305,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,
90,1,0,0,0,7,92,1,0,0,0,9,94,1,0,0,0,11,96,1,0,0,0,13,98,1,0,0,0,15,100,
1,0,0,0,17,109,1,0,0,0,19,132,1,0,0,0,21,134,1,0,0,0,23,148,1,0,0,0,25,162,
1,0,0,0,27,177,1,0,0,0,29,182,1,0,0,0,31,192,1,0,0,0,33,195,1,0,0,0,35,203,
1,0,0,0,37,205,1,0,0,0,39,207,1,0,0,0,41,209,1,0,0,0,43,211,1,0,0,0,45,220,
1,0,0,0,47,225,1,0,0,0,49,230,1,0,0,0,51,241,1,0,0,0,53,245,1,0,0,0,55,261,
1,0,0,0,57,276,1,0,0,0,59,281,1,0,0,0,61,62,5,40,0,0,62,2,1,0,0,0,63,64,
5,41,0,0,64,4,1,0,0,0,65,66,5,114,0,0,66,67,5,101,0,0,67,68,5,108,0,0,68,
69,5,97,0,0,69,70,5,120,0,0,70,71,5,105,0,0,71,72,5,110,0,0,72,91,5,116,
0,0,73,74,5,110,0,0,74,75,5,105,0,0,75,76,5,103,0,0,76,77,5,104,0,0,77,78,
5,116,0,0,78,79,5,99,0,0,79,80,5,104,0,0,80,81,5,97,0,0,81,91,5,114,0,0,
82,83,5,115,0,0,83,84,5,107,0,0,84,85,5,121,0,0,85,86,5,102,0,0,86,87,5,
108,0,0,87,88,5,111,0,0,88,89,5,97,0,0,89,91,5,116,0,0,90,65,1,0,0,0,90,
73,1,0,0,0,90,82,1,0,0,0,91,6,1,0,0,0,92,93,5,43,0,0,93,8,1,0,0,0,94,95,
5,45,0,0,95,10,1,0,0,0,96,97,5,42,0,0,97,12,1,0,0,0,98,99,5,47,0,0,99,14,
1,0,0,0,100,101,5,61,0,0,101,16,1,0,0,0,102,110,7,0,0,0,103,104,5,60,0,0,
104,110,5,61,0,0,105,106,5,62,0,0,106,110,5,61,0,0,107,108,5,33,0,0,108,
110,5,61,0,0,109,102,1,0,0,0,109,103,1,0,0,0,109,105,1,0,0,0,109,107,1,0,
0,0,110,18,1,0,0,0,111,112,5,124,0,0,112,133,5,124,0,0,113,114,5,38,0,0,
114,133,5,38,0,0,115,116,5,61,0,0,116,133,5,61,0,0,117,118,5,112,0,0,118,
119,5,101,0,0,119,120,5,97,0,0,120,121,5,99,0,0,121,122,5,101,0,0,122,123,
5,102,0,0,123,124,5,117,0,0,124,133,5,108,0,0,125,126,5,99,0,0,126,127,5,
104,0,0,127,128,5,97,0,0,128,129,5,111,0,0,129,130,5,116,0,0,130,131,5,105,
0,0,131,133,5,99,0,0,132,111,1,0,0,0,132,113,1,0,0,0,132,115,1,0,0,0,132,
117,1,0,0,0,132,125,1,0,0,0,133,20,1,0,0,0,134,135,5,83,0,0,135,136,5,101,
0,0,136,137,5,114,0,0,137,138,5,101,0,0,138,139,5,110,0,0,139,140,5,105,
0,0,140,141,5,116,0,0,141,142,5,121,0,0,142,143,5,67,0,0,143,144,5,108,0,
0,144,145,5,97,0,0,145,146,5,115,0,0,146,147,5,115,0,0,147,22,1,0,0,0,148,
149,5,67,0,0,149,150,5,111,0,0,150,151,5,122,0,0,151,152,5,121,0,0,152,153,
5,67,0,0,153,154,5,111,0,0,154,155,5,110,0,0,155,156,5,100,0,0,156,157,5,
105,0,0,157,158,5,116,0,0,158,159,5,105,0,0,159,160,5,111,0,0,160,161,5,
110,0,0,161,24,1,0,0,0,162,163,5,84,0,0,163,164,5,119,0,0,164,165,5,105,
0,0,165,166,5,108,0,0,166,167,5,105,0,0,167,168,5,103,0,0,168,169,5,104,
0,0,169,170,5,116,0,0,170,171,5,79,0,0,171,172,5,112,0,0,172,173,5,116,0,
0,173,174,5,105,0,0,174,175,5,111,0,0,175,176,5,110,0,0,176,26,1,0,0,0,177,
178,5,101,0,0,178,179,5,108,0,0,179,180,5,115,0,0,180,181,5,101,0,0,181,
28,1,0,0,0,182,183,5,68,0,0,183,184,5,114,0,0,184,185,5,101,0,0,185,186,
5,97,0,0,186,187,5,109,0,0,187,188,5,69,0,0,188,189,5,108,0,0,189,190,5,
115,0,0,190,191,5,101,0,0,191,30,1,0,0,0,192,193,5,45,0,0,193,194,5,62,0,
0,194,32,1,0,0,0,195,196,5,87,0,0,196,197,5,72,0,0,197,198,5,73,0,0,198,
199,5,83,0,0,199,200,5,80,0,0,200,201,5,69,0,0,201,202,5,82,0,0,202,34,1,
0,0,0,203,204,5,123,0,0,204,36,1,0,0,0,205,206,5,125,0,0,206,38,1,0,0,0,
207,208,5,35,0,0,208,40,1,0,0,0,209,210,5,46,0,0,210,42,1,0,0,0,211,215,
5,34,0,0,212,214,9,0,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,
215,213,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,34,0,0,219,44,
1,0,0,0,220,221,5,34,0,0,221,222,7,1,0,0,222,223,5,34,0,0,223,46,1,0,0,0,
224,226,7,2,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,
1,0,0,0,228,48,1,0,0,0,229,231,7,2,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,
230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,236,7,3,0,0,235,237,7,2,
0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,
50,1,0,0,0,240,242,7,4,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,
0,243,244,1,0,0,0,244,52,1,0,0,0,245,246,5,47,0,0,246,247,5,47,0,0,247,251,
1,0,0,0,248,250,9,0,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,252,1,0,0,0,
251,249,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,256,5,13,0,0,255,254,
1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,5,10,0,0,258,259,1,0,0,0,
259,260,6,26,0,0,260,54,1,0,0,0,261,262,5,47,0,0,262,263,5,42,0,0,263,267,
1,0,0,0,264,266,9,0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,268,1,0,0,0,
267,265,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,5,42,0,0,271,272,
5,47,0,0,272,273,1,0,0,0,273,274,6,27,0,0,274,56,1,0,0,0,275,277,5,13,0,
0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,5,10,0,0,279,58,
1,0,0,0,280,282,7,5,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,
283,284,1,0,0,0,284,285,1,0,0,0,285,286,6,29,0,0,286,60,1,0,0,0,14,0,90,
109,132,215,227,232,238,243,251,255,267,276,283,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", null, "'+'", "'-'", "'*'", 
                         "'/'", "'='", null, null, "'SerenityClass'", "'CozyCondition'", 
                         "'TwilightOption'", "'else'", "'DreamElse'", "'->'", 
                         "'WHISPER'", "'{'", "'}'", "'#'", "'.'" ];
	static symbolicNames = [ null, null, null, "TYPE", "PLUS", "MINUS", "MULT", 
                          "DIV", "IGUAL", "OC", "OL", "SERENITYCLASS", "COZYCONDITION", 
                          "TWILIGHTOPTION", "ELSE", "DREAMYELSE", "ARROW", 
                          "WHISPER", "INITKEY", "FINALKEY", "GATITO", "PUNTITO", 
                          "STARSTRING", "CHAR", "NUM", "FLOAT", "ID", "LINECOMMENT", 
                          "COMMENT", "NEWLINE", "SPACES" ];
	static ruleNames = [ "T__0", "T__1", "TYPE", "PLUS", "MINUS", "MULT", "DIV", 
                      "IGUAL", "OC", "OL", "SERENITYCLASS", "COZYCONDITION", 
                      "TWILIGHTOPTION", "ELSE", "DREAMYELSE", "ARROW", "WHISPER", 
                      "INITKEY", "FINALKEY", "GATITO", "PUNTITO", "STARSTRING", 
                      "CHAR", "NUM", "FLOAT", "ID", "LINECOMMENT", "COMMENT", 
                      "NEWLINE", "SPACES" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.TYPE = 3;
CompilatorLexer.PLUS = 4;
CompilatorLexer.MINUS = 5;
CompilatorLexer.MULT = 6;
CompilatorLexer.DIV = 7;
CompilatorLexer.IGUAL = 8;
CompilatorLexer.OC = 9;
CompilatorLexer.OL = 10;
CompilatorLexer.SERENITYCLASS = 11;
CompilatorLexer.COZYCONDITION = 12;
CompilatorLexer.TWILIGHTOPTION = 13;
CompilatorLexer.ELSE = 14;
CompilatorLexer.DREAMYELSE = 15;
CompilatorLexer.ARROW = 16;
CompilatorLexer.WHISPER = 17;
CompilatorLexer.INITKEY = 18;
CompilatorLexer.FINALKEY = 19;
CompilatorLexer.GATITO = 20;
CompilatorLexer.PUNTITO = 21;
CompilatorLexer.STARSTRING = 22;
CompilatorLexer.CHAR = 23;
CompilatorLexer.NUM = 24;
CompilatorLexer.FLOAT = 25;
CompilatorLexer.ID = 26;
CompilatorLexer.LINECOMMENT = 27;
CompilatorLexer.COMMENT = 28;
CompilatorLexer.NEWLINE = 29;
CompilatorLexer.SPACES = 30;



