// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,24,171,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
3,3,76,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
8,93,8,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,101,8,9,1,10,1,10,1,10,1,10,1,10,1,
10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,146,8,19,11,19,12,19,147,
1,20,4,20,151,8,20,11,20,12,20,152,1,21,4,21,156,8,21,11,21,12,21,157,1,
22,3,22,161,8,22,1,22,1,22,1,23,4,23,166,8,23,11,23,12,23,167,1,23,1,23,
0,0,24,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,1,0,5,2,0,
60,60,62,62,1,0,48,57,2,0,65,90,97,122,6,0,42,43,45,45,47,57,65,90,95,95,
97,122,3,0,9,10,13,13,32,32,182,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,0,3,51,1,0,
0,0,5,53,1,0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,79,1,0,0,0,13,81,1,0,0,0,15,
83,1,0,0,0,17,92,1,0,0,0,19,100,1,0,0,0,21,102,1,0,0,0,23,108,1,0,0,0,25,
123,1,0,0,0,27,128,1,0,0,0,29,131,1,0,0,0,31,136,1,0,0,0,33,138,1,0,0,0,
35,140,1,0,0,0,37,142,1,0,0,0,39,145,1,0,0,0,41,150,1,0,0,0,43,155,1,0,0,
0,45,160,1,0,0,0,47,165,1,0,0,0,49,50,5,61,0,0,50,2,1,0,0,0,51,52,5,40,0,
0,52,4,1,0,0,0,53,54,5,41,0,0,54,6,1,0,0,0,55,56,5,109,0,0,56,57,5,105,0,
0,57,58,5,110,0,0,58,76,5,116,0,0,59,60,5,109,0,0,60,61,5,105,0,0,61,62,
5,110,0,0,62,63,5,116,0,0,63,64,5,99,0,0,64,65,5,104,0,0,65,66,5,97,0,0,
66,76,5,114,0,0,67,68,5,109,0,0,68,69,5,105,0,0,69,70,5,110,0,0,70,71,5,
116,0,0,71,72,5,102,0,0,72,73,5,108,0,0,73,74,5,111,0,0,74,76,5,116,0,0,
75,55,1,0,0,0,75,59,1,0,0,0,75,67,1,0,0,0,76,8,1,0,0,0,77,78,5,43,0,0,78,
10,1,0,0,0,79,80,5,45,0,0,80,12,1,0,0,0,81,82,5,42,0,0,82,14,1,0,0,0,83,
84,5,47,0,0,84,16,1,0,0,0,85,93,7,0,0,0,86,87,5,60,0,0,87,93,5,61,0,0,88,
89,5,62,0,0,89,93,5,61,0,0,90,91,5,33,0,0,91,93,5,61,0,0,92,85,1,0,0,0,92,
86,1,0,0,0,92,88,1,0,0,0,92,90,1,0,0,0,93,18,1,0,0,0,94,95,5,124,0,0,95,
101,5,124,0,0,96,97,5,38,0,0,97,101,5,38,0,0,98,99,5,61,0,0,99,101,5,61,
0,0,100,94,1,0,0,0,100,96,1,0,0,0,100,98,1,0,0,0,101,20,1,0,0,0,102,103,
5,83,0,0,103,104,5,119,0,0,104,105,5,101,0,0,105,106,5,101,0,0,106,107,5,
116,0,0,107,22,1,0,0,0,108,109,5,83,0,0,109,110,5,119,0,0,110,111,5,101,
0,0,111,112,5,101,0,0,112,113,5,116,0,0,113,114,5,67,0,0,114,115,5,111,0,
0,115,116,5,110,0,0,116,117,5,100,0,0,117,118,5,105,0,0,118,119,5,116,0,
0,119,120,5,105,0,0,120,121,5,111,0,0,121,122,5,110,0,0,122,24,1,0,0,0,123,
124,5,69,0,0,124,125,5,108,0,0,125,126,5,115,0,0,126,127,5,101,0,0,127,26,
1,0,0,0,128,129,5,45,0,0,129,130,5,62,0,0,130,28,1,0,0,0,131,132,5,83,0,
0,132,133,5,72,0,0,133,134,5,79,0,0,134,135,5,87,0,0,135,30,1,0,0,0,136,
137,5,123,0,0,137,32,1,0,0,0,138,139,5,125,0,0,139,34,1,0,0,0,140,141,5,
35,0,0,141,36,1,0,0,0,142,143,5,46,0,0,143,38,1,0,0,0,144,146,7,1,0,0,145,
144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,40,1,0,0,
0,149,151,7,2,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,
1,0,0,0,153,42,1,0,0,0,154,156,7,3,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,
155,1,0,0,0,157,158,1,0,0,0,158,44,1,0,0,0,159,161,5,13,0,0,160,159,1,0,
0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,10,0,0,163,46,1,0,0,0,164,
166,7,4,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,
0,0,168,169,1,0,0,0,169,170,6,23,0,0,170,48,1,0,0,0,9,0,75,92,100,147,152,
157,160,167,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "'('", "')'", null, "'+'", "'-'", 
                         "'*'", "'/'", null, null, "'Sweet'", "'SweetCondition'", 
                         "'Else'", "'->'", "'SHOW'", "'{'", "'}'", "'#'", 
                         "'.'" ];
	static symbolicNames = [ null, null, null, null, "TYPE", "PLUS", "MINUS", 
                          "TIMES", "DIV", "OC", "OL", "SWEET", "SWEETCONDITION", 
                          "ELSE", "ARROW", "SHOW", "INITKEY", "FINALKEY", 
                          "GATITO", "PUNTITO", "NUM", "ID", "WRONGID", "NEWLINE", 
                          "SPACES" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "TYPE", "PLUS", "MINUS", "TIMES", 
                      "DIV", "OC", "OL", "SWEET", "SWEETCONDITION", "ELSE", 
                      "ARROW", "SHOW", "INITKEY", "FINALKEY", "GATITO", 
                      "PUNTITO", "NUM", "ID", "WRONGID", "NEWLINE", "SPACES" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.T__2 = 3;
CompilatorLexer.TYPE = 4;
CompilatorLexer.PLUS = 5;
CompilatorLexer.MINUS = 6;
CompilatorLexer.TIMES = 7;
CompilatorLexer.DIV = 8;
CompilatorLexer.OC = 9;
CompilatorLexer.OL = 10;
CompilatorLexer.SWEET = 11;
CompilatorLexer.SWEETCONDITION = 12;
CompilatorLexer.ELSE = 13;
CompilatorLexer.ARROW = 14;
CompilatorLexer.SHOW = 15;
CompilatorLexer.INITKEY = 16;
CompilatorLexer.FINALKEY = 17;
CompilatorLexer.GATITO = 18;
CompilatorLexer.PUNTITO = 19;
CompilatorLexer.NUM = 20;
CompilatorLexer.ID = 21;
CompilatorLexer.WRONGID = 22;
CompilatorLexer.NEWLINE = 23;
CompilatorLexer.SPACES = 24;



