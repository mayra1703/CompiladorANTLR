// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,28,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,84,8,3,1,4,1,4,5,4,88,8,4,10,
4,12,4,91,9,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,
9,1,9,1,9,3,9,110,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,118,8,10,1,11,1,
11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,129,8,11,1,12,1,12,1,12,1,12,
1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,4,21,174,8,21,11,21,12,
21,175,1,22,4,22,179,8,22,11,22,12,22,180,1,23,4,23,184,8,23,11,23,12,23,
185,1,24,1,24,1,24,1,24,5,24,192,8,24,10,24,12,24,195,9,24,1,24,3,24,198,
8,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,208,8,25,10,25,12,25,211,
9,25,1,25,1,25,1,25,1,25,1,25,1,26,3,26,219,8,26,1,26,1,26,1,27,4,27,224,
8,27,11,27,12,27,225,1,27,1,27,3,89,193,209,0,28,1,1,3,2,5,3,7,4,9,5,11,
6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,1,0,5,2,0,60,60,
62,62,1,0,48,57,2,0,65,90,97,122,6,0,42,43,45,45,47,57,65,90,95,95,97,122,
3,0,9,10,13,13,32,32,245,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,0,7,83,1,0,0,0,9,
85,1,0,0,0,11,94,1,0,0,0,13,96,1,0,0,0,15,98,1,0,0,0,17,100,1,0,0,0,19,109,
1,0,0,0,21,117,1,0,0,0,23,128,1,0,0,0,25,130,1,0,0,0,27,136,1,0,0,0,29,151,
1,0,0,0,31,156,1,0,0,0,33,159,1,0,0,0,35,164,1,0,0,0,37,166,1,0,0,0,39,168,
1,0,0,0,41,170,1,0,0,0,43,173,1,0,0,0,45,178,1,0,0,0,47,183,1,0,0,0,49,187,
1,0,0,0,51,203,1,0,0,0,53,218,1,0,0,0,55,223,1,0,0,0,57,58,5,61,0,0,58,2,
1,0,0,0,59,60,5,40,0,0,60,4,1,0,0,0,61,62,5,41,0,0,62,6,1,0,0,0,63,64,5,
109,0,0,64,65,5,105,0,0,65,66,5,110,0,0,66,84,5,116,0,0,67,68,5,109,0,0,
68,69,5,105,0,0,69,70,5,110,0,0,70,71,5,116,0,0,71,72,5,99,0,0,72,73,5,104,
0,0,73,74,5,97,0,0,74,84,5,114,0,0,75,76,5,109,0,0,76,77,5,105,0,0,77,78,
5,110,0,0,78,79,5,116,0,0,79,80,5,102,0,0,80,81,5,108,0,0,81,82,5,111,0,
0,82,84,5,116,0,0,83,63,1,0,0,0,83,67,1,0,0,0,83,75,1,0,0,0,84,8,1,0,0,0,
85,89,5,34,0,0,86,88,9,0,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,90,1,0,0,0,89,
87,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,34,0,0,93,10,1,0,0,0,94,95,
5,43,0,0,95,12,1,0,0,0,96,97,5,45,0,0,97,14,1,0,0,0,98,99,5,42,0,0,99,16,
1,0,0,0,100,101,5,47,0,0,101,18,1,0,0,0,102,110,7,0,0,0,103,104,5,60,0,0,
104,110,5,61,0,0,105,106,5,62,0,0,106,110,5,61,0,0,107,108,5,33,0,0,108,
110,5,61,0,0,109,102,1,0,0,0,109,103,1,0,0,0,109,105,1,0,0,0,109,107,1,0,
0,0,110,20,1,0,0,0,111,112,5,124,0,0,112,118,5,124,0,0,113,114,5,38,0,0,
114,118,5,38,0,0,115,116,5,61,0,0,116,118,5,61,0,0,117,111,1,0,0,0,117,113,
1,0,0,0,117,115,1,0,0,0,118,22,1,0,0,0,119,120,5,116,0,0,120,121,5,114,0,
0,121,122,5,117,0,0,122,129,5,101,0,0,123,124,5,102,0,0,124,125,5,97,0,0,
125,126,5,108,0,0,126,127,5,115,0,0,127,129,5,101,0,0,128,119,1,0,0,0,128,
123,1,0,0,0,129,24,1,0,0,0,130,131,5,83,0,0,131,132,5,119,0,0,132,133,5,
101,0,0,133,134,5,101,0,0,134,135,5,116,0,0,135,26,1,0,0,0,136,137,5,83,
0,0,137,138,5,119,0,0,138,139,5,101,0,0,139,140,5,101,0,0,140,141,5,116,
0,0,141,142,5,67,0,0,142,143,5,111,0,0,143,144,5,110,0,0,144,145,5,100,0,
0,145,146,5,105,0,0,146,147,5,116,0,0,147,148,5,105,0,0,148,149,5,111,0,
0,149,150,5,110,0,0,150,28,1,0,0,0,151,152,5,69,0,0,152,153,5,108,0,0,153,
154,5,115,0,0,154,155,5,101,0,0,155,30,1,0,0,0,156,157,5,45,0,0,157,158,
5,62,0,0,158,32,1,0,0,0,159,160,5,83,0,0,160,161,5,72,0,0,161,162,5,79,0,
0,162,163,5,87,0,0,163,34,1,0,0,0,164,165,5,123,0,0,165,36,1,0,0,0,166,167,
5,125,0,0,167,38,1,0,0,0,168,169,5,35,0,0,169,40,1,0,0,0,170,171,5,46,0,
0,171,42,1,0,0,0,172,174,7,1,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,
1,0,0,0,175,176,1,0,0,0,176,44,1,0,0,0,177,179,7,2,0,0,178,177,1,0,0,0,179,
180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,46,1,0,0,0,182,184,7,3,0,
0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,48,
1,0,0,0,187,188,5,47,0,0,188,189,5,47,0,0,189,193,1,0,0,0,190,192,9,0,0,
0,191,190,1,0,0,0,192,195,1,0,0,0,193,194,1,0,0,0,193,191,1,0,0,0,194,197,
1,0,0,0,195,193,1,0,0,0,196,198,5,13,0,0,197,196,1,0,0,0,197,198,1,0,0,0,
198,199,1,0,0,0,199,200,5,10,0,0,200,201,1,0,0,0,201,202,6,24,0,0,202,50,
1,0,0,0,203,204,5,47,0,0,204,205,5,42,0,0,205,209,1,0,0,0,206,208,9,0,0,
0,207,206,1,0,0,0,208,211,1,0,0,0,209,210,1,0,0,0,209,207,1,0,0,0,210,212,
1,0,0,0,211,209,1,0,0,0,212,213,5,42,0,0,213,214,5,47,0,0,214,215,1,0,0,
0,215,216,6,25,0,0,216,52,1,0,0,0,217,219,5,13,0,0,218,217,1,0,0,0,218,219,
1,0,0,0,219,220,1,0,0,0,220,221,5,10,0,0,221,54,1,0,0,0,222,224,7,4,0,0,
223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,
1,0,0,0,227,228,6,27,0,0,228,56,1,0,0,0,14,0,83,89,109,117,128,175,180,185,
193,197,209,218,225,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "'('", "')'", null, null, "'+'", "'-'", 
                         "'*'", "'/'", null, null, null, "'Sweet'", "'SweetCondition'", 
                         "'Else'", "'->'", "'SHOW'", "'{'", "'}'", "'#'", 
                         "'.'" ];
	static symbolicNames = [ null, null, null, null, "TYPE", "STRING", "PLUS", 
                          "MINUS", "TIMES", "DIV", "OC", "OL", "BOOL", "SWEET", 
                          "SWEETCONDITION", "ELSE", "ARROW", "SHOW", "INITKEY", 
                          "FINALKEY", "GATITO", "PUNTITO", "NUM", "ID", 
                          "WRONGID", "LINECOMMENT", "COMMENT", "NEWLINE", 
                          "SPACES" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "TYPE", "STRING", "PLUS", 
                      "MINUS", "TIMES", "DIV", "OC", "OL", "BOOL", "SWEET", 
                      "SWEETCONDITION", "ELSE", "ARROW", "SHOW", "INITKEY", 
                      "FINALKEY", "GATITO", "PUNTITO", "NUM", "ID", "WRONGID", 
                      "LINECOMMENT", "COMMENT", "NEWLINE", "SPACES" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.T__2 = 3;
CompilatorLexer.TYPE = 4;
CompilatorLexer.STRING = 5;
CompilatorLexer.PLUS = 6;
CompilatorLexer.MINUS = 7;
CompilatorLexer.TIMES = 8;
CompilatorLexer.DIV = 9;
CompilatorLexer.OC = 10;
CompilatorLexer.OL = 11;
CompilatorLexer.BOOL = 12;
CompilatorLexer.SWEET = 13;
CompilatorLexer.SWEETCONDITION = 14;
CompilatorLexer.ELSE = 15;
CompilatorLexer.ARROW = 16;
CompilatorLexer.SHOW = 17;
CompilatorLexer.INITKEY = 18;
CompilatorLexer.FINALKEY = 19;
CompilatorLexer.GATITO = 20;
CompilatorLexer.PUNTITO = 21;
CompilatorLexer.NUM = 22;
CompilatorLexer.ID = 23;
CompilatorLexer.WRONGID = 24;
CompilatorLexer.LINECOMMENT = 25;
CompilatorLexer.COMMENT = 26;
CompilatorLexer.NEWLINE = 27;
CompilatorLexer.SPACES = 28;



