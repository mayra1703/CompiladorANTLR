// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,37,334,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
105,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,
1,9,3,9,124,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,145,8,10,1,11,1,11,1,11,1,12,
1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,163,8,13,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
1,25,1,26,1,26,1,27,1,27,5,27,257,8,27,10,27,12,27,260,9,27,1,27,1,27,1,
28,4,28,265,8,28,11,28,12,28,266,1,29,1,29,3,29,271,8,29,1,29,1,29,1,30,
4,30,276,8,30,11,30,12,30,277,1,30,1,30,4,30,282,8,30,11,30,12,30,283,1,
31,4,31,287,8,31,11,31,12,31,288,1,32,1,32,1,32,1,32,5,32,295,8,32,10,32,
12,32,298,9,32,1,32,3,32,301,8,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
5,33,311,8,33,10,33,12,33,314,9,33,1,33,1,33,1,33,1,33,1,33,1,34,3,34,322,
8,34,1,34,1,34,1,35,4,35,327,8,35,11,35,12,35,328,1,35,1,35,1,36,1,36,3,
258,296,312,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
36,73,37,1,0,6,2,0,60,60,62,62,1,0,48,57,3,0,32,32,65,90,97,122,1,0,46,46,
3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,355,0,1,1,0,0,0,0,3,1,0,0,0,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,104,1,0,0,0,7,106,1,0,0,0,9,
108,1,0,0,0,11,110,1,0,0,0,13,112,1,0,0,0,15,114,1,0,0,0,17,116,1,0,0,0,
19,123,1,0,0,0,21,144,1,0,0,0,23,146,1,0,0,0,25,149,1,0,0,0,27,162,1,0,0,
0,29,164,1,0,0,0,31,178,1,0,0,0,33,192,1,0,0,0,35,207,1,0,0,0,37,212,1,0,
0,0,39,222,1,0,0,0,41,232,1,0,0,0,43,235,1,0,0,0,45,238,1,0,0,0,47,246,1,
0,0,0,49,248,1,0,0,0,51,250,1,0,0,0,53,252,1,0,0,0,55,254,1,0,0,0,57,264,
1,0,0,0,59,268,1,0,0,0,61,275,1,0,0,0,63,286,1,0,0,0,65,290,1,0,0,0,67,306,
1,0,0,0,69,321,1,0,0,0,71,326,1,0,0,0,73,332,1,0,0,0,75,76,5,40,0,0,76,2,
1,0,0,0,77,78,5,41,0,0,78,4,1,0,0,0,79,80,5,114,0,0,80,81,5,101,0,0,81,82,
5,108,0,0,82,83,5,97,0,0,83,84,5,120,0,0,84,85,5,105,0,0,85,86,5,110,0,0,
86,105,5,116,0,0,87,88,5,110,0,0,88,89,5,105,0,0,89,90,5,103,0,0,90,91,5,
104,0,0,91,92,5,116,0,0,92,93,5,99,0,0,93,94,5,104,0,0,94,95,5,97,0,0,95,
105,5,114,0,0,96,97,5,115,0,0,97,98,5,107,0,0,98,99,5,121,0,0,99,100,5,102,
0,0,100,101,5,108,0,0,101,102,5,111,0,0,102,103,5,97,0,0,103,105,5,116,0,
0,104,79,1,0,0,0,104,87,1,0,0,0,104,96,1,0,0,0,105,6,1,0,0,0,106,107,5,43,
0,0,107,8,1,0,0,0,108,109,5,45,0,0,109,10,1,0,0,0,110,111,5,42,0,0,111,12,
1,0,0,0,112,113,5,47,0,0,113,14,1,0,0,0,114,115,5,37,0,0,115,16,1,0,0,0,
116,117,5,61,0,0,117,18,1,0,0,0,118,124,7,0,0,0,119,120,5,60,0,0,120,124,
5,61,0,0,121,122,5,62,0,0,122,124,5,61,0,0,123,118,1,0,0,0,123,119,1,0,0,
0,123,121,1,0,0,0,124,20,1,0,0,0,125,126,5,61,0,0,126,145,5,61,0,0,127,128,
5,33,0,0,128,145,5,61,0,0,129,130,5,112,0,0,130,131,5,101,0,0,131,132,5,
97,0,0,132,133,5,99,0,0,133,134,5,101,0,0,134,135,5,102,0,0,135,136,5,117,
0,0,136,145,5,108,0,0,137,138,5,99,0,0,138,139,5,104,0,0,139,140,5,97,0,
0,140,141,5,111,0,0,141,142,5,116,0,0,142,143,5,105,0,0,143,145,5,99,0,0,
144,125,1,0,0,0,144,127,1,0,0,0,144,129,1,0,0,0,144,137,1,0,0,0,145,22,1,
0,0,0,146,147,5,124,0,0,147,148,5,124,0,0,148,24,1,0,0,0,149,150,5,38,0,
0,150,151,5,38,0,0,151,26,1,0,0,0,152,153,5,43,0,0,153,163,5,61,0,0,154,
155,5,45,0,0,155,163,5,61,0,0,156,157,5,42,0,0,157,163,5,61,0,0,158,159,
5,47,0,0,159,163,5,61,0,0,160,161,5,37,0,0,161,163,5,61,0,0,162,152,1,0,
0,0,162,154,1,0,0,0,162,156,1,0,0,0,162,158,1,0,0,0,162,160,1,0,0,0,163,
28,1,0,0,0,164,165,5,83,0,0,165,166,5,101,0,0,166,167,5,114,0,0,167,168,
5,101,0,0,168,169,5,110,0,0,169,170,5,105,0,0,170,171,5,116,0,0,171,172,
5,121,0,0,172,173,5,67,0,0,173,174,5,108,0,0,174,175,5,97,0,0,175,176,5,
115,0,0,176,177,5,115,0,0,177,30,1,0,0,0,178,179,5,67,0,0,179,180,5,111,
0,0,180,181,5,122,0,0,181,182,5,121,0,0,182,183,5,67,0,0,183,184,5,111,0,
0,184,185,5,110,0,0,185,186,5,100,0,0,186,187,5,105,0,0,187,188,5,116,0,
0,188,189,5,105,0,0,189,190,5,111,0,0,190,191,5,110,0,0,191,32,1,0,0,0,192,
193,5,84,0,0,193,194,5,119,0,0,194,195,5,105,0,0,195,196,5,108,0,0,196,197,
5,105,0,0,197,198,5,103,0,0,198,199,5,104,0,0,199,200,5,116,0,0,200,201,
5,79,0,0,201,202,5,112,0,0,202,203,5,116,0,0,203,204,5,105,0,0,204,205,5,
111,0,0,205,206,5,110,0,0,206,34,1,0,0,0,207,208,5,101,0,0,208,209,5,108,
0,0,209,210,5,115,0,0,210,211,5,101,0,0,211,36,1,0,0,0,212,213,5,68,0,0,
213,214,5,114,0,0,214,215,5,101,0,0,215,216,5,97,0,0,216,217,5,109,0,0,217,
218,5,69,0,0,218,219,5,108,0,0,219,220,5,115,0,0,220,221,5,101,0,0,221,38,
1,0,0,0,222,223,5,68,0,0,223,224,5,114,0,0,224,225,5,101,0,0,225,226,5,97,
0,0,226,227,5,109,0,0,227,228,5,76,0,0,228,229,5,111,0,0,229,230,5,111,0,
0,230,231,5,112,0,0,231,40,1,0,0,0,232,233,5,100,0,0,233,234,5,111,0,0,234,
42,1,0,0,0,235,236,5,45,0,0,236,237,5,62,0,0,237,44,1,0,0,0,238,239,5,87,
0,0,239,240,5,72,0,0,240,241,5,73,0,0,241,242,5,83,0,0,242,243,5,80,0,0,
243,244,5,69,0,0,244,245,5,82,0,0,245,46,1,0,0,0,246,247,5,123,0,0,247,48,
1,0,0,0,248,249,5,125,0,0,249,50,1,0,0,0,250,251,5,35,0,0,251,52,1,0,0,0,
252,253,5,46,0,0,253,54,1,0,0,0,254,258,5,34,0,0,255,257,9,0,0,0,256,255,
1,0,0,0,257,260,1,0,0,0,258,259,1,0,0,0,258,256,1,0,0,0,259,261,1,0,0,0,
260,258,1,0,0,0,261,262,5,34,0,0,262,56,1,0,0,0,263,265,7,1,0,0,264,263,
1,0,0,0,265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,58,1,0,0,0,268,
270,5,34,0,0,269,271,7,2,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,
0,0,272,273,5,34,0,0,273,60,1,0,0,0,274,276,7,1,0,0,275,274,1,0,0,0,276,
277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,281,7,3,
0,0,280,282,7,1,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,
284,1,0,0,0,284,62,1,0,0,0,285,287,7,4,0,0,286,285,1,0,0,0,287,288,1,0,0,
0,288,286,1,0,0,0,288,289,1,0,0,0,289,64,1,0,0,0,290,291,5,47,0,0,291,292,
5,47,0,0,292,296,1,0,0,0,293,295,9,0,0,0,294,293,1,0,0,0,295,298,1,0,0,0,
296,297,1,0,0,0,296,294,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,299,301,
5,13,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,5,10,0,
0,303,304,1,0,0,0,304,305,6,32,0,0,305,66,1,0,0,0,306,307,5,47,0,0,307,308,
5,42,0,0,308,312,1,0,0,0,309,311,9,0,0,0,310,309,1,0,0,0,311,314,1,0,0,0,
312,313,1,0,0,0,312,310,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,316,
5,42,0,0,316,317,5,47,0,0,317,318,1,0,0,0,318,319,6,33,0,0,319,68,1,0,0,
0,320,322,5,13,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,
5,10,0,0,324,70,1,0,0,0,325,327,7,5,0,0,326,325,1,0,0,0,327,328,1,0,0,0,
328,326,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,6,35,0,0,331,72,
1,0,0,0,332,333,5,44,0,0,333,74,1,0,0,0,16,0,104,123,144,162,258,266,270,
277,283,288,296,300,312,321,328,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", null, "'+'", "'-'", "'*'", 
                         "'/'", "'%'", "'='", null, null, "'||'", "'&&'", 
                         null, "'SerenityClass'", "'CozyCondition'", "'TwilightOption'", 
                         "'else'", "'DreamElse'", "'DreamLoop'", "'do'", 
                         "'->'", "'WHISPER'", "'{'", "'}'", "'#'", "'.'", 
                         null, null, null, null, null, null, null, null, 
                         null, "','" ];
	static symbolicNames = [ null, null, null, "TYPE", "PLUS", "MINUS", "MULT", 
                          "DIV", "MOD", "IGUAL", "OC", "OL", "OR", "AND", 
                          "MATH_EQUALS", "SERENITYCLASS", "COZYCONDITION", 
                          "TWILIGHTOPTION", "ELSE", "DREAMYELSE", "DREAMLOOP", 
                          "DO", "ARROW", "WHISPER", "INITKEY", "FINALKEY", 
                          "GATITO", "PUNTITO", "STARSTRING", "NUM", "CHAR", 
                          "FLOAT", "ID", "LINECOMMENT", "COMMENT", "NEWLINE", 
                          "SPACES", "COMA" ];
	static ruleNames = [ "T__0", "T__1", "TYPE", "PLUS", "MINUS", "MULT", "DIV", 
                      "MOD", "IGUAL", "OC", "OL", "OR", "AND", "MATH_EQUALS", 
                      "SERENITYCLASS", "COZYCONDITION", "TWILIGHTOPTION", 
                      "ELSE", "DREAMYELSE", "DREAMLOOP", "DO", "ARROW", 
                      "WHISPER", "INITKEY", "FINALKEY", "GATITO", "PUNTITO", 
                      "STARSTRING", "NUM", "CHAR", "FLOAT", "ID", "LINECOMMENT", 
                      "COMMENT", "NEWLINE", "SPACES", "COMA" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.TYPE = 3;
CompilatorLexer.PLUS = 4;
CompilatorLexer.MINUS = 5;
CompilatorLexer.MULT = 6;
CompilatorLexer.DIV = 7;
CompilatorLexer.MOD = 8;
CompilatorLexer.IGUAL = 9;
CompilatorLexer.OC = 10;
CompilatorLexer.OL = 11;
CompilatorLexer.OR = 12;
CompilatorLexer.AND = 13;
CompilatorLexer.MATH_EQUALS = 14;
CompilatorLexer.SERENITYCLASS = 15;
CompilatorLexer.COZYCONDITION = 16;
CompilatorLexer.TWILIGHTOPTION = 17;
CompilatorLexer.ELSE = 18;
CompilatorLexer.DREAMYELSE = 19;
CompilatorLexer.DREAMLOOP = 20;
CompilatorLexer.DO = 21;
CompilatorLexer.ARROW = 22;
CompilatorLexer.WHISPER = 23;
CompilatorLexer.INITKEY = 24;
CompilatorLexer.FINALKEY = 25;
CompilatorLexer.GATITO = 26;
CompilatorLexer.PUNTITO = 27;
CompilatorLexer.STARSTRING = 28;
CompilatorLexer.NUM = 29;
CompilatorLexer.CHAR = 30;
CompilatorLexer.FLOAT = 31;
CompilatorLexer.ID = 32;
CompilatorLexer.LINECOMMENT = 33;
CompilatorLexer.COMMENT = 34;
CompilatorLexer.NEWLINE = 35;
CompilatorLexer.SPACES = 36;
CompilatorLexer.COMA = 37;



