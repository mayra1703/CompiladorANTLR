// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,195,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,
1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,3,3,80,8,3,1,4,1,4,5,4,84,8,4,10,4,12,4,87,9,4,1,4,1,
4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,106,8,
9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,114,8,10,1,11,1,11,1,11,1,11,1,11,1,
11,1,11,1,11,1,11,3,11,125,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,
1,18,1,19,1,19,1,20,1,20,1,21,4,21,170,8,21,11,21,12,21,171,1,22,4,22,175,
8,22,11,22,12,22,176,1,23,4,23,180,8,23,11,23,12,23,181,1,24,3,24,185,8,
24,1,24,1,24,1,25,4,25,190,8,25,11,25,12,25,191,1,25,1,25,1,85,0,26,1,1,
3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,1,0,5,
2,0,60,60,62,62,1,0,48,57,2,0,65,90,97,122,6,0,42,43,45,45,47,57,65,90,95,
95,97,122,3,0,9,10,13,13,32,32,208,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,
90,1,0,0,0,13,92,1,0,0,0,15,94,1,0,0,0,17,96,1,0,0,0,19,105,1,0,0,0,21,113,
1,0,0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,132,1,0,0,0,29,147,1,0,0,0,31,152,
1,0,0,0,33,155,1,0,0,0,35,160,1,0,0,0,37,162,1,0,0,0,39,164,1,0,0,0,41,166,
1,0,0,0,43,169,1,0,0,0,45,174,1,0,0,0,47,179,1,0,0,0,49,184,1,0,0,0,51,189,
1,0,0,0,53,54,5,61,0,0,54,2,1,0,0,0,55,56,5,40,0,0,56,4,1,0,0,0,57,58,5,
41,0,0,58,6,1,0,0,0,59,60,5,109,0,0,60,61,5,105,0,0,61,62,5,110,0,0,62,80,
5,116,0,0,63,64,5,109,0,0,64,65,5,105,0,0,65,66,5,110,0,0,66,67,5,116,0,
0,67,68,5,99,0,0,68,69,5,104,0,0,69,70,5,97,0,0,70,80,5,114,0,0,71,72,5,
109,0,0,72,73,5,105,0,0,73,74,5,110,0,0,74,75,5,116,0,0,75,76,5,102,0,0,
76,77,5,108,0,0,77,78,5,111,0,0,78,80,5,116,0,0,79,59,1,0,0,0,79,63,1,0,
0,0,79,71,1,0,0,0,80,8,1,0,0,0,81,85,5,34,0,0,82,84,9,0,0,0,83,82,1,0,0,
0,84,87,1,0,0,0,85,86,1,0,0,0,85,83,1,0,0,0,86,88,1,0,0,0,87,85,1,0,0,0,
88,89,5,34,0,0,89,10,1,0,0,0,90,91,5,43,0,0,91,12,1,0,0,0,92,93,5,45,0,0,
93,14,1,0,0,0,94,95,5,42,0,0,95,16,1,0,0,0,96,97,5,47,0,0,97,18,1,0,0,0,
98,106,7,0,0,0,99,100,5,60,0,0,100,106,5,61,0,0,101,102,5,62,0,0,102,106,
5,61,0,0,103,104,5,33,0,0,104,106,5,61,0,0,105,98,1,0,0,0,105,99,1,0,0,0,
105,101,1,0,0,0,105,103,1,0,0,0,106,20,1,0,0,0,107,108,5,124,0,0,108,114,
5,124,0,0,109,110,5,38,0,0,110,114,5,38,0,0,111,112,5,61,0,0,112,114,5,61,
0,0,113,107,1,0,0,0,113,109,1,0,0,0,113,111,1,0,0,0,114,22,1,0,0,0,115,116,
5,116,0,0,116,117,5,114,0,0,117,118,5,117,0,0,118,125,5,101,0,0,119,120,
5,102,0,0,120,121,5,97,0,0,121,122,5,108,0,0,122,123,5,115,0,0,123,125,5,
101,0,0,124,115,1,0,0,0,124,119,1,0,0,0,125,24,1,0,0,0,126,127,5,83,0,0,
127,128,5,119,0,0,128,129,5,101,0,0,129,130,5,101,0,0,130,131,5,116,0,0,
131,26,1,0,0,0,132,133,5,83,0,0,133,134,5,119,0,0,134,135,5,101,0,0,135,
136,5,101,0,0,136,137,5,116,0,0,137,138,5,67,0,0,138,139,5,111,0,0,139,140,
5,110,0,0,140,141,5,100,0,0,141,142,5,105,0,0,142,143,5,116,0,0,143,144,
5,105,0,0,144,145,5,111,0,0,145,146,5,110,0,0,146,28,1,0,0,0,147,148,5,69,
0,0,148,149,5,108,0,0,149,150,5,115,0,0,150,151,5,101,0,0,151,30,1,0,0,0,
152,153,5,45,0,0,153,154,5,62,0,0,154,32,1,0,0,0,155,156,5,83,0,0,156,157,
5,72,0,0,157,158,5,79,0,0,158,159,5,87,0,0,159,34,1,0,0,0,160,161,5,123,
0,0,161,36,1,0,0,0,162,163,5,125,0,0,163,38,1,0,0,0,164,165,5,35,0,0,165,
40,1,0,0,0,166,167,5,46,0,0,167,42,1,0,0,0,168,170,7,1,0,0,169,168,1,0,0,
0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,44,1,0,0,0,173,175,
7,2,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,
177,46,1,0,0,0,178,180,7,3,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,
0,0,0,181,182,1,0,0,0,182,48,1,0,0,0,183,185,5,13,0,0,184,183,1,0,0,0,184,
185,1,0,0,0,185,186,1,0,0,0,186,187,5,10,0,0,187,50,1,0,0,0,188,190,7,4,
0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,
193,1,0,0,0,193,194,6,25,0,0,194,52,1,0,0,0,11,0,79,85,105,113,124,171,176,
181,184,191,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "'('", "')'", null, null, "'+'", "'-'", 
                         "'*'", "'/'", null, null, null, "'Sweet'", "'SweetCondition'", 
                         "'Else'", "'->'", "'SHOW'", "'{'", "'}'", "'#'", 
                         "'.'" ];
	static symbolicNames = [ null, null, null, null, "TYPE", "STRING", "PLUS", 
                          "MINUS", "TIMES", "DIV", "OC", "OL", "BOOL", "SWEET", 
                          "SWEETCONDITION", "ELSE", "ARROW", "SHOW", "INITKEY", 
                          "FINALKEY", "GATITO", "PUNTITO", "NUM", "ID", 
                          "WRONGID", "NEWLINE", "SPACES" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "TYPE", "STRING", "PLUS", 
                      "MINUS", "TIMES", "DIV", "OC", "OL", "BOOL", "SWEET", 
                      "SWEETCONDITION", "ELSE", "ARROW", "SHOW", "INITKEY", 
                      "FINALKEY", "GATITO", "PUNTITO", "NUM", "ID", "WRONGID", 
                      "NEWLINE", "SPACES" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.T__2 = 3;
CompilatorLexer.TYPE = 4;
CompilatorLexer.STRING = 5;
CompilatorLexer.PLUS = 6;
CompilatorLexer.MINUS = 7;
CompilatorLexer.TIMES = 8;
CompilatorLexer.DIV = 9;
CompilatorLexer.OC = 10;
CompilatorLexer.OL = 11;
CompilatorLexer.BOOL = 12;
CompilatorLexer.SWEET = 13;
CompilatorLexer.SWEETCONDITION = 14;
CompilatorLexer.ELSE = 15;
CompilatorLexer.ARROW = 16;
CompilatorLexer.SHOW = 17;
CompilatorLexer.INITKEY = 18;
CompilatorLexer.FINALKEY = 19;
CompilatorLexer.GATITO = 20;
CompilatorLexer.PUNTITO = 21;
CompilatorLexer.NUM = 22;
CompilatorLexer.ID = 23;
CompilatorLexer.WRONGID = 24;
CompilatorLexer.NEWLINE = 25;
CompilatorLexer.SPACES = 26;



