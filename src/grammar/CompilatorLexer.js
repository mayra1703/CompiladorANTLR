// Generated from ./grammar/Compilator.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,14,95,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,4,7,
62,8,7,11,7,12,7,63,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,4,10,75,8,10,11,
10,12,10,76,1,11,4,11,80,8,11,11,11,12,11,81,1,12,3,12,85,8,12,1,12,1,12,
1,13,4,13,90,8,13,11,13,12,13,91,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,
6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,4,1,0,48,57,2,0,65,90,
97,122,6,0,42,43,45,45,47,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,99,
0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,33,1,0,0,0,7,
35,1,0,0,0,9,37,1,0,0,0,11,42,1,0,0,0,13,51,1,0,0,0,15,61,1,0,0,0,17,65,
1,0,0,0,19,71,1,0,0,0,21,74,1,0,0,0,23,79,1,0,0,0,25,84,1,0,0,0,27,89,1,
0,0,0,29,30,5,123,0,0,30,2,1,0,0,0,31,32,5,125,0,0,32,4,1,0,0,0,33,34,5,
35,0,0,34,6,1,0,0,0,35,36,5,61,0,0,36,8,1,0,0,0,37,38,5,109,0,0,38,39,5,
105,0,0,39,40,5,110,0,0,40,41,5,116,0,0,41,10,1,0,0,0,42,43,5,109,0,0,43,
44,5,105,0,0,44,45,5,110,0,0,45,46,5,116,0,0,46,47,5,99,0,0,47,48,5,104,
0,0,48,49,5,97,0,0,49,50,5,114,0,0,50,12,1,0,0,0,51,52,5,109,0,0,52,53,5,
105,0,0,53,54,5,110,0,0,54,55,5,116,0,0,55,56,5,102,0,0,56,57,5,108,0,0,
57,58,5,111,0,0,58,59,5,116,0,0,59,14,1,0,0,0,60,62,7,0,0,0,61,60,1,0,0,
0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,16,1,0,0,0,65,66,5,83,0,0,
66,67,5,119,0,0,67,68,5,101,0,0,68,69,5,101,0,0,69,70,5,116,0,0,70,18,1,
0,0,0,71,72,5,46,0,0,72,20,1,0,0,0,73,75,7,1,0,0,74,73,1,0,0,0,75,76,1,0,
0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,22,1,0,0,0,78,80,7,2,0,0,79,78,1,0,0,
0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,24,1,0,0,0,83,85,5,13,0,0,
84,83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,10,0,0,87,26,1,0,0,0,88,
90,7,3,0,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,93,
1,0,0,0,93,94,6,13,0,0,94,28,1,0,0,0,6,0,63,76,81,84,91,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompilatorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilator.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'{'", "'}'", "'#'", "'='", "'mint'", "'mintchar'", 
                         "'mintflot'", null, "'Sweet'", "'.'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          "NUM", "SWEET", "PUNTITO", "ID", "WRONGID", "NEWLINE", 
                          "SPACES" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "NUM", "SWEET", "PUNTITO", "ID", "WRONGID", "NEWLINE", 
                      "SPACES" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompilatorLexer.EOF = antlr4.Token.EOF;
CompilatorLexer.T__0 = 1;
CompilatorLexer.T__1 = 2;
CompilatorLexer.T__2 = 3;
CompilatorLexer.T__3 = 4;
CompilatorLexer.T__4 = 5;
CompilatorLexer.T__5 = 6;
CompilatorLexer.T__6 = 7;
CompilatorLexer.NUM = 8;
CompilatorLexer.SWEET = 9;
CompilatorLexer.PUNTITO = 10;
CompilatorLexer.ID = 11;
CompilatorLexer.WRONGID = 12;
CompilatorLexer.NEWLINE = 13;
CompilatorLexer.SPACES = 14;



